
*** Everything in python is object ***
*** Every object contains methods ***


objects
---------

number
---------
number can be integer or decimal or hexa or octal.

aval = 10
bval = 3.32


string
----------
String should be defined in single or double or triple quotes.

aname = 'python programming'
bname = "java programming"
cname = """uni shell programming"""
print(aname)
print(cname)



list ( array  in C)
---------------------
list contains set of elements.
Elements can be set of numbers or strings or any combination.


alist = [4,0,50,40,30]
print(alist)
blist = ["unix","java",34.32,23]
print(blist)


tuple ( unchangeable , immutable )
----
tuple contains set of elements.
**** Elements inside tuple cannot be modified ***
Elements can be set of numbers or strings or any combination.
tuple elements are defined in ()

# list of lists
empinfo  = [['ram',25,"UK",'1-1-90'],['rita',20,'US','2-2-95'] ]

# list of tuples
empinfo  = [ ('ram',25,"UK",'1-1-90'),('rita',20,'US','2-2-95') ]




atup = (30,40,"unix",3.32)


dictionary  ( hash in perl )( like the json data )
--------------
dictionary contains elements in the form of keys and values.  ( items)
dictionary elements are defined in {}.
In dictionary
 keys are generally number or string which is used to uniquely identify the value
 value can be number or string or list or tuple or dictionrary or list of lists , list of dictionaries or any 
                                                                                               other structure

syntax:    object =  { key:value , key:value  key:value }
example:    book  =  {"chap1": 10 ,"chap2":20 , "chap3":30}
            data  =  { 1:2,3:4,5:6}
            datainfo  =  { 1:"first",3:["IND","US"],5:1}
            book  =  {"chap1": [10,"Rita","US"] ,"chap2":[20,"Ram","IND"] }           
 

set
-----
set is unordered collection of unique values of same type.

aset = {10,20,30,30,30}
bset = {30,30,30,40,40,40,50}







level1
level1
level1
level1
if cond:
    level2
    level2
level1
level1


level1
level1
level1
level1
if cond:
    level2
    level2
else:
    level2
    level2
level1
level1



operators
-------------


arithmetic operators :  + - * %  /


relational operators :    <     >    <=    >=    ==   !=

1 2        
1 < 2
1 < 2
1 <= 2
1 >= 2
1 != 2
! == 2

logical operators
----------------
and
or
not

name = "python"
if len(name) == 6   and  name.islower() :
    ## do something



if len(name) == 6   or name.islower() :
    ## do something


assignment operators  ( ++ and -- are NOT allowed in python )
---------------------

val = 10
val = val + 1    or val+=1
val = val * 4    or val*=4



special operators
------------------

+ : concatenation operator

3 + 3
"hello" + "python"
[10,20,30] + [40,50,60]
[10,20,30] + (40,50,60)   ----> invalid  ( objects should be same type)
"hello" + 9              ----> invalid  ( objects should be same type)


repetition operator
-------------------
 *

>>> name = "python"
>>> name * 4
'pythonpythonpythonpython'


>>> alist = [10,20,30]
>>> alist * 4
[10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]















print()
len()
range()
help()
dir()

str()
list()
tuple()
dict()
int()
oct()
set()


max([10,20,30])
min([10,20,30])
sum([10,20,30])

type()
isinstance()


file handling
--------------

.exe
.doc
pwb
tar
tar.gz
gz
zip
xlsx
xls
csv
log
.prop
.properties
.conf
.png
.jpeg
.gif
.ini
.bat
.txt
.rtf
pdf
docx
xlsx
ppt
pptx


c - header file
----
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<string.h>
#include<graphics.h>
#include<math.h>


python - packages | libraries
--------------------------------------




core programming + libraries + core expertise




file handling
-------------


working with flat files ( csv json txt log prop .... )
-----------------------
python has the builtin functions like open() to open the flat files




opening the file
---------------------
r - read mode
w - write mode
a - append mode


syntax:     object  = open(filename,mode)
example:      fr  = open("customers.txt","r")
              fw  = open("customers.txt","w")
              case1: If the file is not existing ... file will be created first
              case2: If the file is already existing.. it overwrites the existing content

              fa  = open("customers.txt","a")
              case1: If the file is not existing ... file will be created first
              case2: If the file is already existing.. it appends/adds the data to the existing content



closing the file
--------------
fr.close()



file read operation
----------------------

- reading the file using file object
- fobj.readlines()
- fobj.read()
- using csv library
- using pandas library


exception handling
--------------------

There are 2 types of errors.

1. syntax error
2. semantic error or runtime error or logical error


handling the errors in the runtime is known as exception handling.


try   ( mandate)
except ( mandate)
else   ( optional)
finally( optional)
raise



library | package | module 
----------------------------
Every library contains some set of methods



builtin library : builin libraries are those library which are generally used( math operations, file operations, emailing , copy files , ....) by every developer.



third party library
-----------------------
Depending on the requirement(database operations, ML, networking, cloud automation , web automations) developer has to install the third party library from 

- www.pypi.org downloading manually from this portal
- installing using pip tool  ( from the internet directly)






task =   core python( procedural or object oriented ) +  library + understanding documentation + your expertise




definition |function | submodule | subroutine
----------------------------------------------

- builtin functions     ( in the console ....just type   dir(__builtin__)   )

- user defined functions
----------------------------
we define the function for the reusability purpose.
define the block once and call it for multiple times.


passing arguments
--------------------
fixed arguments
default arguments
keyword arguments
variable length arguments






python installed

database installed

database module

display all existing database
-------------------------------

show databases ;


create your own database
-------------------------
create database ericsson;


access your database
-----------------------
use ericsson ;


show tables
-------------
show tables ;    ( initially it will be empty)

create table
--------------
create table realestate ( street varchar(200) , city varchar(200) ;


inserting records
-------------------
insert into realestate values('HitechCity','Hyderabad');
insert into realestate values('MG Road','Pune');


display all the records
--------------------------
select * from realestate;




step 1:  connected to the database
step 2:  query
step 3:  execute the query
step 4:  fetch the data from table
step 5:  close the connection




re - regular expression
---------------------

grep  : global regular expression and pattern

- search for some substring/pattern in the string
- match  ( at the beginning of the string)
- sub    ( replacing the string with some other string)
- findall
- spilt with some pattern



metacharacters or wildcard characters  -- these symbols are common across the languages
-------------------------------------
^   $    *   +    ?   ()    []    {}    \d  \s   \w


^  :   beginning of the string
       if re.search('^python',line):


$ :   ending  with the string
      if re.search('python$',line):

. :   any single character
      if re.search(".ython",line):        # python  mython 1ython Mython Rython


* :   zero or more occurences of the preceding character
       if re.search('pyt*hon',line):


+ :one or more occurences of the preceding character
       if re.search('pyt+hon',line):


? :  either zero or one occurence of the preceding character


(pattern1|pattern2) : display lines containing either pattern1 or pattern2
                      if re.search("python|java",line):



[]    : character class
[mqey]: one single character from the given characters
        if re.search('[pmqu]ython',line):      # python      # mython    # qython   # uython


[mqie]ython :   mython or qython  or iython or eython
[a-z]ython  :
[a-zA-Z0-9]ython  :



{min,max} :   min to max occurences of the preceding characters
              if re.search("pyt{2,6}hon",line)






















procedural programming ( top down approach)

object oriented progrmming ( class object)






6:20 PM IST







































OOP principles     - common for all the languages
----------------

- escapsulation
- class and object
- polymorphism
- inheritance
- data abstraction



procedural programming ( top down programming)


object oriented programming ( we are writing everything in the class )


class
-----
class is something like blueprint of the house
class contains data members ( variables or attributes) and member functions ( methods )


object
-------
object is instance of the class.


self
-----
self in the instance of the object

alist = [10,20,30]

blist = [30,40,50]

alist and blist objects are the instances of the class called List internally





















builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
pysftp
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings  ( grep awk sed )
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address



























third party files ( xlsx docx pdf  pptx mp4 mpeg ... )






































